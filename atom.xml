<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帅哥季的博客</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://liuxing7954.github.io/blog/"/>
  <updated>2019-07-05T09:37:05.000Z</updated>
  <id>https://liuxing7954.github.io/blog/</id>
  
  <author>
    <name>liuxing7954</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective-Java(1)</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/JAVA%E5%9F%BA%E7%A1%80/Effective-Java(1)/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/JAVA基础/Effective-Java(1)/</id>
    <published>2019-07-05T09:37:05.000Z</published>
    <updated>2019-07-05T09:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我阅读Effective-Java这本书做的笔记记录.希望能加深印象以后写的代码逼格能高一点</p></blockquote><h2 id="创建或销毁对象"><a href="#创建或销毁对象" class="headerlink" title="创建或销毁对象"></a>创建或销毁对象</h2><ul><li>设计一个类时,优先考虑是否能使用静态工厂方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这样可以在重复使用对象时,减少对象的<code>生成</code>,也可以将构造方法转变成有<code>名称意义</code>的函数调用</p></blockquote><ul><li><p>一个类的初始化参数过多时,考虑使用Build方式创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    OuterClass(Builder builder)&#123;</span><br><span class="line">        <span class="comment">// 从builder对象里取属性赋值...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">        Builder(`这里传必须的参数`)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 其余可选参数用方法传入...</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> OuterClass <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OuterClass(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单例模式的实现考虑用枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> SomeClass&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可选设置构造方法</span></span><br><span class="line">    <span class="comment">// 定义属性...</span></span><br><span class="line">    <span class="comment">// 定义方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果想类不被实例化,添加一个私有的构造方法</p><blockquote><p>这个我觉得没什么鸟用,书中指的大概是工具类这样的类,这种类名字一看也就不会去实例化吧</p></blockquote></li><li><p>如果<code>&#39;工具类&#39;</code>需要引用一些资源,而这些资源会变的,那就意味着这不应该是个静态工具类</p><blockquote><p>可以用构造器传入这个资源具体的对象,也叫做依赖注入</p></blockquote></li><li>避免创建多余的对象<blockquote><p>复杂我还没理解,简单的一个场景就是自动装箱与拆箱,尽量都声明为基本类型可以避免创建多余封装对象</p></blockquote></li><li>消除过期引用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">       <span class="keyword">return</span> elements[--size];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>这段代码隐藏了一个OOM的错误,因为pop行为只减小了size的值而,elements数组中依然保留着对象的引用,这会导致对象不被回收,长期可能会OOM,解决办法是size减小的时候,将不用的引用置空</p></blockquote><ul><li>使用try-resources代替try-finnally<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try-finnally</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;finnally&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// try-resources</span></span><br><span class="line"><span class="keyword">try</span>(`初始化`)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;finnally&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是我阅读Effective-Java这本书做的笔记记录.希望能加深印象以后写的代码逼格能高一点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;创建或销毁对象&quot;&gt;&lt;a href=&quot;#创建或销毁对象&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java线程基础</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/Java多线程/Java线程基础/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程的基本状态"><a href="#线程的基本状态" class="headerlink" title="线程的基本状态"></a>线程的基本状态</h2><ol><li><p><em>初始化</em>(New)</p><p><code>调用线程的start方法</code>进入<strong>阶段2</strong>。</p></li><li><p><em>可运行</em>(Runnable)</p><p><code>获得cpu时间片</code>进入<strong>阶段3</strong>。</p></li><li><p><em>运行中</em></p><p>逻辑阶段，<code>时间片暂时用完</code>或者<code>调用yield</code>主动让出cpu（非强制性）回到<strong>阶段2。</strong><code>等待用户输入</code>，或者<code>sleep</code> 会进入<strong>阶段4</strong>，<code>主动调用wait方法</code>，会进入<strong>阶段5</strong>。</p></li><li><p><em>阻塞阶段</em>(Blocked)</p><p>阻塞的原因<code>解除</code>会回到可运行阶段</p></li><li><p><em>等待队列</em>(Waiting)</p><p>这是一个<code>不争取锁</code>资源的队列，<code>直到wait超时</code>，或者被<code>notify</code>和<code>notifyall</code>方法唤醒，进入到<strong>阶段6</strong>。</p></li><li><p><em>锁池</em></p><p><code>等待争取锁</code>，争取到锁就进入<strong>阶段2</strong>。</p></li></ol><h2 id="线程的主要方法使用"><a href="#线程的主要方法使用" class="headerlink" title="线程的主要方法使用"></a>线程的主要方法使用</h2><h4 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h4><ul><li><p>start</p><p>实际调用的native方法start0.此方法会<code>真正的新起</code>一个线程去执行run方法</p></li><li><p>run</p><p>仅仅是调用的runable对象的<code>run方法</code>，和线程一点关系都没有</p></li><li><p>yield</p><p>告诉调度器，此线程可以<code>让出cpu时间</code>，但是是否会切换执行线程，要看调度器的执行，所以这是个<code>非强制的方法</code>。</p></li></ul><h2 id="获取线程的返回值方案"><a href="#获取线程的返回值方案" class="headerlink" title="获取线程的返回值方案"></a>获取线程的返回值方案</h2><p>线程一般新建的方法是<code>new Thread（new Runnable（）{}）;</code></p><p>这种集成自Runnable的线程实现<code>不支持返回值</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Join方法</p><p>给继承自Runnable的实现类一个成员属性，然后run方法中给属性赋值，主线程中获取该值前调用线程的<code>join方法</code>去等待线程执行完毕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">5000</span>);</span><br><span class="line">            name = <span class="string">"jxy"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    MyThread target = <span class="keyword">new</span> MyThread();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(target);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.join();</span><br><span class="line">    String name = target.name;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Callable接口返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = <span class="string">"jxy"</span>;</span><br><span class="line">        Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    MyCallable myCallable = <span class="keyword">new</span> MyCallable();</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(myCallable);</span><br><span class="line">    <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">    String name = futureTask.get();</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="wait和sleep的区别"><a href="#wait和sleep的区别" class="headerlink" title="wait和sleep的区别"></a>wait和sleep的区别</h2><ul><li><p>wait是Object的方法，sleep是Thread的方法</p></li><li><p>sleep方法让出cpu执行时间，<code>不释放锁</code>，wait<code>让出cpu时间和锁</code></p></li><li><p>wait让出锁的特性——所以只能在<code>synchronized代码块或者方法</code>中使用。</p></li></ul><h2 id="锁池和等待池"><a href="#锁池和等待池" class="headerlink" title="锁池和等待池"></a>锁池和等待池</h2><p>线程中调用无参的<code>wait方法</code>，那就会进入<code>无限期等待中</code>(Waiting)也叫<code>等待池</code>（WaitSet）在这里的线程，释放了锁和让出cpu之后，<code>不会去争取cpu时间</code>,除非被notify和notifyall<code>唤醒</code>，重新进去锁池去争取锁。</p><h2 id="notify和notifyall的区别"><a href="#notify和notifyall的区别" class="headerlink" title="notify和notifyall的区别"></a>notify和notifyall的区别</h2><p>这两个方法的区别在于notify<code>随机唤醒</code>一个等待池中的一个等待线程。notifyall<code>唤醒全部</code>等待线程</p><h2 id="stop和interrupt的区别"><a href="#stop和interrupt的区别" class="headerlink" title="stop和interrupt的区别"></a>stop和interrupt的区别</h2><p>stop不安全已经废弃</p><p>interrupt是一个中断的通知，具体的中断由线程本身来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!isInterrupted()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"thread 1"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程的基本状态&quot;&gt;&lt;a href=&quot;#线程的基本状态&quot; class=&quot;headerlink&quot; title=&quot;线程的基本状态&quot;&gt;&lt;/a&gt;线程的基本状态&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;初始化&lt;/em&gt;(New)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;调用线程的start
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
      <category term="多线程" scheme="https://liuxing7954.github.io/blog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java线程基础2</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%802/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/Java多线程/Java线程基础2/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="synchronized的底层原理"><a href="#synchronized的底层原理" class="headerlink" title="synchronized的底层原理"></a>synchronized的底层原理</h2><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>synchronized是一个可重入锁，也就是已经获取锁对象，就可以重复使用</p><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><h2 id="自适应自旋锁"><a href="#自适应自旋锁" class="headerlink" title="自适应自旋锁"></a>自适应自旋锁</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;synchronized的底层原理&quot;&gt;&lt;a href=&quot;#synchronized的底层原理&quot; class=&quot;headerlink&quot; title=&quot;synchronized的底层原理&quot;&gt;&lt;/a&gt;synchronized的底层原理&lt;/h2&gt;&lt;h2 id=&quot;可重入锁&quot;
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
      <category term="多线程" scheme="https://liuxing7954.github.io/blog/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AOP使用说明</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-AOP%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-AOP使用说明/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h2 id="切入点正则规则"><a href="#切入点正则规则" class="headerlink" title="切入点正则规则"></a>切入点正则规则</h2><h2 id="JdkProxy和Cglib"><a href="#JdkProxy和Cglib" class="headerlink" title="JdkProxy和Cglib"></a>JdkProxy和Cglib</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;名词解释&quot;&gt;&lt;a href=&quot;#名词解释&quot; class=&quot;headerlink&quot; title=&quot;名词解释&quot;&gt;&lt;/a&gt;名词解释&lt;/h2&gt;&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://liuxing7954.github.io/blog/tags/Spring/"/>
    
      <category term="Spring-AOP" scheme="https://liuxing7954.github.io/blog/tags/Spring-AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC(1)-意义</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-IOC(1)-%E6%84%8F%E4%B9%89/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-IOC(1)-意义/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h2><p>Spring Core 的<code>核心部分</code></p><blockquote><p>先行知识 – 依赖注入<code>Dependency Inversion</code></p></blockquote><h4 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h4><p>一个<code>上级依赖于下级</code>的架构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/07/05/ZdiRVx.png" alt="1556338180523" title>                </div>                <div class="image-caption">1556338180523</div>            </figure><p>如果最下级的Tire的成员变量size要改为<code>动态化</code>的，那架构图如下</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2019/07/05/Spring/Spring-IOC(1)-意义/../img/1556338298535.png" alt="1556338298535" title>                </div>                <div class="image-caption">1556338298535</div>            </figure><p>问题不言而喻，所以优化后的架构应该是<code>下层依赖于上层</code>，即将下层的对象<code>注入</code>到上层中，将程序进行<code>解耦</code>。</p><p>优化后的架构为</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/07/05/ZdFSzQ.png" alt="1556338486389" title>                </div>                <div class="image-caption">1556338486389</div>            </figure><p>此时再进行相同的需求改造时,只要改变Tire类的代码.</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2019/07/05/Spring/Spring-IOC(1)-意义/D:/System\Doc\CODE\blog\source\_posts\1556338534655.png" alt="1556338534655" title>                </div>                <div class="image-caption">1556338534655</div>            </figure><p>两者的差别很明显,<code>耦合度后者更低</code>,但是后者的初始化代码变的非常复杂.</p><p>为了解决这个问题,IOC容器内部隐藏了这些步骤.即将Luggage的初始化简化成<code>前者情况</code>的样子.</p><p>IOC容器内部初始化一个对象的过程为</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/07/05/ZdFsFf.png" alt="1556338766562" title>                </div>                <div class="image-caption">1556338766562</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是IOC&quot;&gt;&lt;a href=&quot;#什么是IOC&quot; class=&quot;headerlink&quot; title=&quot;什么是IOC&quot;&gt;&lt;/a&gt;什么是IOC&lt;/h2&gt;&lt;p&gt;Spring Core 的&lt;code&gt;核心部分&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先行知
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://liuxing7954.github.io/blog/tags/Spring/"/>
    
      <category term="Spring-IOC" scheme="https://liuxing7954.github.io/blog/tags/Spring-IOC/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC(2)-结构解析</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-IOC(2)-%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/Spring/Spring-IOC(2)-结构解析/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="学习笔记" scheme="https://liuxing7954.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://liuxing7954.github.io/blog/tags/Java/"/>
    
      <category term="Spring" scheme="https://liuxing7954.github.io/blog/tags/Spring/"/>
    
      <category term="Spring-IOC" scheme="https://liuxing7954.github.io/blog/tags/Spring-IOC/"/>
    
  </entry>
  
  <entry>
    <title>求合租</title>
    <link href="https://liuxing7954.github.io/blog/2019/07/05/%E5%85%B6%E4%BB%96/%E5%AF%BB%E5%90%88%E7%A7%9F%E8%88%8D%E5%8F%8B/"/>
    <id>https://liuxing7954.github.io/blog/2019/07/05/其他/寻合租舍友/</id>
    <published>2019-07-05T08:32:25.000Z</published>
    <updated>2019-07-05T08:32:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本情况"><a href="#基本情况" class="headerlink" title="基本情况"></a>基本情况</h2><ul><li>丞相坊8号楼中层</li><li><code>1300元</code>/月 水电网费另算</li><li>房子总大小<code>64平</code></li><li><code>二室</code>一厅一厨一卫一阳台(<code>在主卧</code>)</li><li>精装修</li><li><code>押一</code>付一</li></ul><h2 id="入住可享受"><a href="#入住可享受" class="headerlink" title="入住可享受"></a>入住可享受</h2><p>床,空调,洗衣机,冰箱,落地晾衣杆,宽带,沙发,客厅,可做饭,衣柜,阳台,热水器,卫生间,桌子,各种厨具,电脑椅,麻将桌</p><h2 id="房间概况"><a href="#房间概况" class="headerlink" title="房间概况"></a>房间概况</h2><p>我是这套房子翻修后的<code>第一批租客</code>,墙壁地板都是<code>全新</code>的,之前的舍友已经换房子, 现在入住的<code>押金</code>也是<code>给房东</code>,出租的是<code>主卧</code>,<code>附带阳台</code>而且面积更大一些, 但房价还是<code>一人一半</code>.目前还没有涨价的消息.</p><h2 id="租客要求"><a href="#租客要求" class="headerlink" title="租客要求"></a>租客要求</h2><p><code>男女</code>皆可,<code>一至二人</code>皆可.<code>主卧比较大,之前放一个气垫床可以住两人</code></p><h2 id="实物图"><a href="#实物图" class="headerlink" title="实物图"></a>实物图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2019/07/05/其他/寻合租舍友/客厅1.jpg" alt="客厅1" title="客厅1">                </div>                <div class="image-caption">客厅1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2019/07/05/其他/寻合租舍友/客厅2.jpg" alt="客厅2" title="客厅2">                </div>                <div class="image-caption">客厅2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/blog/2019/07/05/其他/寻合租舍友/主卧.jpg" alt="待出租卧室" title="待出租卧室">                </div>                <div class="image-caption">待出租卧室</div>            </figure><p>现在没人住所以堆积了一些东西, 其实只有<code>床</code>和<code>衣柜</code>和<code>落地晾衣杆</code>和<code>桌子</code></p><h2 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h2><ul><li>Tel: 18850107457</li><li>QQ: 467677527</li><li>微信: 同电话</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本情况&quot;&gt;&lt;a href=&quot;#基本情况&quot; class=&quot;headerlink&quot; title=&quot;基本情况&quot;&gt;&lt;/a&gt;基本情况&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;丞相坊8号楼中层&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1300元&lt;/code&gt;/月 水电网费另算&lt;/li&gt;
&lt;li&gt;房
      
    
    </summary>
    
      <category term="杂物" scheme="https://liuxing7954.github.io/blog/categories/%E6%9D%82%E7%89%A9/"/>
    
    
      <category term="已过期" scheme="https://liuxing7954.github.io/blog/tags/%E5%B7%B2%E8%BF%87%E6%9C%9F/"/>
    
  </entry>
  
</feed>
